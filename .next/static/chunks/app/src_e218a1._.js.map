{
  "version": 3,
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/lib/apolloClient.ts"],"sourcesContent":["import { HttpLink, InMemoryCache } from \"@apollo/client\";\nimport {\n  NextSSRApolloClient,\n} from \"@apollo/experimental-nextjs-app-support/ssr\";\nimport { registerApolloClient } from \"@apollo/experimental-nextjs-app-support/rsc\";\n\nexport const { getClient } = registerApolloClient(() => {\n  return new NextSSRApolloClient({\n    cache: new InMemoryCache(),\n    link: new HttpLink({\n      uri: \"http://localhost:4444/api/graphql\",\n    }),\n  });\n});"],"names":[],"mappings":";;;;;;;;;;AAMO,MAAM,EAAE,SAAS,EAAE,GAAG,iMAAqB;IAChD,OAAO,oMAAwB;QAC7B,OAAO;QACP,MAAM,wIAAa;YACjB,KAAK;QACP;IACF;AACF"}},
    {"offset": {"line": 22, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 26, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/graphql/queries/POSTS_Q.ts"],"sourcesContent":["import { gql } from '@apollo/client';\n\nexport const POSTS = gql`\n  query Posts {\n    posts {\n      id\n      title\n      body\n      createdAt\n      author{\n        id\n        nickname\n      }\n    }\n  }\n`;\n\n\n"],"names":[],"mappings":";;;;;;AAEO,MAAM,QAAQ,8HAAG,CAAC;;;;;;;;;;;;;AAazB,CAAC"}},
    {"offset": {"line": 46, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 50, "column": 0}, "map": {"version":3,"sources":["/turbopack/[project]/src/components/search/HeaderSearch.tsx"],"sourcesContent":["\"use client\";\r\n\r\nimport { POSTS } from \"@/graphql/queries/POSTS_Q\";\r\nimport { getClient } from \"@/lib/apolloClient\";\r\nimport { FormEvent, useState } from \"react\";\r\n\r\n\r\nexport function HeaderSearch() {\r\n  async function getPostInfo(title: string) {\r\n    const { data } = await getClient().query({\r\n      query: POSTS,\r\n      variables: { title },\r\n    });\r\n\r\n    const postInfo = data.posts[0];\r\n\r\n    return postInfo;\r\n  }\r\n\r\n  const searchPost = async (e: FormEvent) => {\r\n    e.preventDefault();\r\n    const form = e.target as typeof e.target & {\r\n      postTitle: HTMLInputElement;\r\n    };\r\n    const postTitle = form.postTitle.value.trim();\r\n\r\n    const post = await getPostInfo(postTitle);\r\n\r\n    if (!post) {\r\n      return \"Post with such title doesn't exist\";\r\n    }\r\n  };\r\n  return (\r\n    <form className=\"flex gap-1\" onSubmit={searchPost}>\r\n      <input\r\n        type=\"search\"\r\n        name=\"postTitle\"\r\n        className=\"text-black\"\r\n        placeholder=\"Filter by sku\"\r\n      />\r\n      <button type=\"submit\">&#128269;</button>\r\n    </form>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;;;;AAAA;;;;AAOO,SAAS;IACd,eAAe,YAAY,KAAa;QACtC,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,sHAAY,KAAK,CAAC;YACvC,KAAK;YACL,WAAW;gBAAE;YAAM;QACrB;QAEA,MAAM,WAAW,KAAK,KAAK,CAAC,EAAE;QAE9B,OAAO;IACT;IAEA,MAAM,aAAa,OAAO;QACxB,EAAE,cAAc;QAChB,MAAM,OAAO,EAAE,MAAM;QAGrB,MAAM,YAAY,KAAK,SAAS,CAAC,KAAK,CAAC,IAAI;QAE3C,MAAM,OAAO,MAAM,YAAY;QAE/B,IAAI,CAAC,MAAM;YACT,OAAO;QACT;IACF;IACA,qBACE,iKAAC;QAAK,WAAU;QAAa,UAAU;;0BACrC,iKAAC;gBACC,MAAK;gBACL,MAAK;gBACL,WAAU;gBACV,aAAY;;;;;;0BAEd,iKAAC;gBAAO,MAAK;0BAAS;;;;;;;;;;;;AAG5B;KApCgB"}},
    {"offset": {"line": 113, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}